var wasm;

/**
* Enum of all supported languages.
* Check the [Snowball-Website](https://snowballstem.org/) for details.
*/
module.exports.Languages = Object.freeze({ Arabic:0,Danish:1,Dutch:2,English:3,Finnish:4,French:5,German:6,Greek:7,Hungarian:8,Italian:9,Portuguese:10,Romanian:11,Russian:12,Spanish:13,Swedish:14,Tamil:15,Turkish:16, });

let WASM_VECTOR_LEN = 0;

let cachegetNodeBufferMemory = null;
function getNodeBufferMemory() {
    if (cachegetNodeBufferMemory === null || cachegetNodeBufferMemory.buffer !== wasm.memory.buffer) {
        cachegetNodeBufferMemory = Buffer.from(wasm.memory.buffer);
    }
    return cachegetNodeBufferMemory;
}

function passStringToWasm(arg) {

    const size = Buffer.byteLength(arg);
    const ptr = wasm.__wbindgen_malloc(size);
    getNodeBufferMemory().write(arg, ptr, size);
    WASM_VECTOR_LEN = size;
    return ptr;
}

const TextDecoder = require('util').TextDecoder;

let cachedTextDecoder = new TextDecoder('utf-8');

let cachegetUint8Memory = null;
function getUint8Memory() {
    if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== wasm.memory.buffer) {
        cachegetUint8Memory = new Uint8Array(wasm.memory.buffer);
    }
    return cachegetUint8Memory;
}

function getStringFromWasm(ptr, len) {
    return cachedTextDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));
}

let cachedGlobalArgumentPtr = null;
function globalArgumentPtr() {
    if (cachedGlobalArgumentPtr === null) {
        cachedGlobalArgumentPtr = wasm.__wbindgen_global_argument_ptr();
    }
    return cachedGlobalArgumentPtr;
}

let cachegetUint32Memory = null;
function getUint32Memory() {
    if (cachegetUint32Memory === null || cachegetUint32Memory.buffer !== wasm.memory.buffer) {
        cachegetUint32Memory = new Uint32Array(wasm.memory.buffer);
    }
    return cachegetUint32Memory;
}

module.exports.__wbindgen_throw = function(ptr, len) {
    throw new Error(getStringFromWasm(ptr, len));
};

function freeStemmer(ptr) {

    wasm.__wbg_stemmer_free(ptr);
}
/**
* Wrapps a usable interface around the actual stemmer implementation
*/
class Stemmer {

    free() {
        const ptr = this.ptr;
        this.ptr = 0;
        freeStemmer(ptr);
    }

    /**
    * Create a new stemmer from an algorithm
    * @param {number} language
    * @returns {}
    */
    constructor(language) {
        this.ptr = wasm.stemmer_new(language);
    }
    /**
    * Stem a single word
    * Please note, that the input is expected to be all lowercase (if that is applicable).
    * @param {string} input
    * @returns {string}
    */
    stem(input) {
        const ptr0 = passStringToWasm(input);
        const len0 = WASM_VECTOR_LEN;
        const retptr = globalArgumentPtr();
        try {
            wasm.stemmer_stem(retptr, this.ptr, ptr0, len0);
            const mem = getUint32Memory();
            const rustptr = mem[retptr / 4];
            const rustlen = mem[retptr / 4 + 1];

            const realRet = getStringFromWasm(rustptr, rustlen).slice();
            wasm.__wbindgen_free(rustptr, rustlen * 1);
            return realRet;


        } finally {
            wasm.__wbindgen_free(ptr0, len0 * 1);

        }

    }
}
module.exports.Stemmer = Stemmer;

wasm = require('./index_bg');

